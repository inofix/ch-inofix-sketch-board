/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package ch.inofix.sketchboard.model.impl;

import aQute.bnd.annotation.ProviderType;

import ch.inofix.sketchboard.model.SketchBoard;
import ch.inofix.sketchboard.model.SketchBoardModel;
import ch.inofix.sketchboard.model.SketchBoardSoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.workflow.WorkflowConstants;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SketchBoard service. Represents a row in the &quot;inofix_sb_SketchBoard&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SketchBoardModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SketchBoardImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SketchBoardImpl
 * @see SketchBoard
 * @see SketchBoardModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SketchBoardModelImpl extends BaseModelImpl<SketchBoard>
	implements SketchBoardModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sketch board model instance should use the {@link SketchBoard} interface instead.
	 */
	public static final String TABLE_NAME = "inofix_sb_SketchBoard";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "sketchBoardId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "statusByUserId", Types.BIGINT },
			{ "statusByUserName", Types.VARCHAR },
			{ "statusDate", Types.TIMESTAMP },
			{ "name", Types.VARCHAR },
			{ "configuration", Types.VARCHAR },
			{ "setup", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sketchBoardId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("statusByUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("statusByUserName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("configuration", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("setup", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table inofix_sb_SketchBoard (uuid_ VARCHAR(75) null,sketchBoardId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,statusByUserId LONG,statusByUserName VARCHAR(75) null,statusDate DATE null,name VARCHAR(75) null,configuration VARCHAR(75) null,setup VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table inofix_sb_SketchBoard";
	public static final String ORDER_BY_JPQL = " ORDER BY sketchBoard.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY inofix_sb_SketchBoard.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(ch.inofix.sketchboard.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.ch.inofix.sketchboard.model.SketchBoard"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(ch.inofix.sketchboard.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.ch.inofix.sketchboard.model.SketchBoard"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(ch.inofix.sketchboard.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.ch.inofix.sketchboard.model.SketchBoard"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SketchBoard toModel(SketchBoardSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SketchBoard model = new SketchBoardImpl();

		model.setUuid(soapModel.getUuid());
		model.setSketchBoardId(soapModel.getSketchBoardId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setStatusByUserId(soapModel.getStatusByUserId());
		model.setStatusByUserName(soapModel.getStatusByUserName());
		model.setStatusDate(soapModel.getStatusDate());
		model.setName(soapModel.getName());
		model.setConfiguration(soapModel.getConfiguration());
		model.setSetup(soapModel.getSetup());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SketchBoard> toModels(SketchBoardSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SketchBoard> models = new ArrayList<SketchBoard>(soapModels.length);

		for (SketchBoardSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(ch.inofix.sketchboard.service.util.ServiceProps.get(
				"lock.expiration.time.ch.inofix.sketchboard.model.SketchBoard"));

	public SketchBoardModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _sketchBoardId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSketchBoardId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _sketchBoardId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SketchBoard.class;
	}

	@Override
	public String getModelClassName() {
		return SketchBoard.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("sketchBoardId", getSketchBoardId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("status", getStatus());
		attributes.put("statusByUserId", getStatusByUserId());
		attributes.put("statusByUserName", getStatusByUserName());
		attributes.put("statusDate", getStatusDate());
		attributes.put("name", getName());
		attributes.put("configuration", getConfiguration());
		attributes.put("setup", getSetup());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long sketchBoardId = (Long)attributes.get("sketchBoardId");

		if (sketchBoardId != null) {
			setSketchBoardId(sketchBoardId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Long statusByUserId = (Long)attributes.get("statusByUserId");

		if (statusByUserId != null) {
			setStatusByUserId(statusByUserId);
		}

		String statusByUserName = (String)attributes.get("statusByUserName");

		if (statusByUserName != null) {
			setStatusByUserName(statusByUserName);
		}

		Date statusDate = (Date)attributes.get("statusDate");

		if (statusDate != null) {
			setStatusDate(statusDate);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String configuration = (String)attributes.get("configuration");

		if (configuration != null) {
			setConfiguration(configuration);
		}

		String setup = (String)attributes.get("setup");

		if (setup != null) {
			setSetup(setup);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSketchBoardId() {
		return _sketchBoardId;
	}

	@Override
	public void setSketchBoardId(long sketchBoardId) {
		_sketchBoardId = sketchBoardId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public long getStatusByUserId() {
		return _statusByUserId;
	}

	@Override
	public void setStatusByUserId(long statusByUserId) {
		_statusByUserId = statusByUserId;
	}

	@Override
	public String getStatusByUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getStatusByUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setStatusByUserUuid(String statusByUserUuid) {
	}

	@JSON
	@Override
	public String getStatusByUserName() {
		if (_statusByUserName == null) {
			return "";
		}
		else {
			return _statusByUserName;
		}
	}

	@Override
	public void setStatusByUserName(String statusByUserName) {
		_statusByUserName = statusByUserName;
	}

	@JSON
	@Override
	public Date getStatusDate() {
		return _statusDate;
	}

	@Override
	public void setStatusDate(Date statusDate) {
		_statusDate = statusDate;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getConfiguration() {
		if (_configuration == null) {
			return "";
		}
		else {
			return _configuration;
		}
	}

	@Override
	public void setConfiguration(String configuration) {
		_configuration = configuration;
	}

	@JSON
	@Override
	public String getSetup() {
		if (_setup == null) {
			return "";
		}
		else {
			return _setup;
		}
	}

	@Override
	public void setSetup(String setup) {
		_setup = setup;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SketchBoard.class.getName()));
	}

	@Override
	public boolean isApproved() {
		if (getStatus() == WorkflowConstants.STATUS_APPROVED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDenied() {
		if (getStatus() == WorkflowConstants.STATUS_DENIED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isDraft() {
		if (getStatus() == WorkflowConstants.STATUS_DRAFT) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isExpired() {
		if (getStatus() == WorkflowConstants.STATUS_EXPIRED) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isInactive() {
		if (getStatus() == WorkflowConstants.STATUS_INACTIVE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isIncomplete() {
		if (getStatus() == WorkflowConstants.STATUS_INCOMPLETE) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isPending() {
		if (getStatus() == WorkflowConstants.STATUS_PENDING) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public boolean isScheduled() {
		if (getStatus() == WorkflowConstants.STATUS_SCHEDULED) {
			return true;
		}
		else {
			return false;
		}
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SketchBoard.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SketchBoard toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SketchBoard)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SketchBoardImpl sketchBoardImpl = new SketchBoardImpl();

		sketchBoardImpl.setUuid(getUuid());
		sketchBoardImpl.setSketchBoardId(getSketchBoardId());
		sketchBoardImpl.setGroupId(getGroupId());
		sketchBoardImpl.setCompanyId(getCompanyId());
		sketchBoardImpl.setUserId(getUserId());
		sketchBoardImpl.setUserName(getUserName());
		sketchBoardImpl.setCreateDate(getCreateDate());
		sketchBoardImpl.setModifiedDate(getModifiedDate());
		sketchBoardImpl.setStatus(getStatus());
		sketchBoardImpl.setStatusByUserId(getStatusByUserId());
		sketchBoardImpl.setStatusByUserName(getStatusByUserName());
		sketchBoardImpl.setStatusDate(getStatusDate());
		sketchBoardImpl.setName(getName());
		sketchBoardImpl.setConfiguration(getConfiguration());
		sketchBoardImpl.setSetup(getSetup());

		sketchBoardImpl.resetOriginalValues();

		return sketchBoardImpl;
	}

	@Override
	public int compareTo(SketchBoard sketchBoard) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				sketchBoard.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SketchBoard)) {
			return false;
		}

		SketchBoard sketchBoard = (SketchBoard)obj;

		long primaryKey = sketchBoard.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SketchBoardModelImpl sketchBoardModelImpl = this;

		sketchBoardModelImpl._originalUuid = sketchBoardModelImpl._uuid;

		sketchBoardModelImpl._originalGroupId = sketchBoardModelImpl._groupId;

		sketchBoardModelImpl._setOriginalGroupId = false;

		sketchBoardModelImpl._originalCompanyId = sketchBoardModelImpl._companyId;

		sketchBoardModelImpl._setOriginalCompanyId = false;

		sketchBoardModelImpl._setModifiedDate = false;

		sketchBoardModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SketchBoard> toCacheModel() {
		SketchBoardCacheModel sketchBoardCacheModel = new SketchBoardCacheModel();

		sketchBoardCacheModel.uuid = getUuid();

		String uuid = sketchBoardCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			sketchBoardCacheModel.uuid = null;
		}

		sketchBoardCacheModel.sketchBoardId = getSketchBoardId();

		sketchBoardCacheModel.groupId = getGroupId();

		sketchBoardCacheModel.companyId = getCompanyId();

		sketchBoardCacheModel.userId = getUserId();

		sketchBoardCacheModel.userName = getUserName();

		String userName = sketchBoardCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			sketchBoardCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			sketchBoardCacheModel.createDate = createDate.getTime();
		}
		else {
			sketchBoardCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			sketchBoardCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			sketchBoardCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		sketchBoardCacheModel.status = getStatus();

		sketchBoardCacheModel.statusByUserId = getStatusByUserId();

		sketchBoardCacheModel.statusByUserName = getStatusByUserName();

		String statusByUserName = sketchBoardCacheModel.statusByUserName;

		if ((statusByUserName != null) && (statusByUserName.length() == 0)) {
			sketchBoardCacheModel.statusByUserName = null;
		}

		Date statusDate = getStatusDate();

		if (statusDate != null) {
			sketchBoardCacheModel.statusDate = statusDate.getTime();
		}
		else {
			sketchBoardCacheModel.statusDate = Long.MIN_VALUE;
		}

		sketchBoardCacheModel.name = getName();

		String name = sketchBoardCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			sketchBoardCacheModel.name = null;
		}

		sketchBoardCacheModel.configuration = getConfiguration();

		String configuration = sketchBoardCacheModel.configuration;

		if ((configuration != null) && (configuration.length() == 0)) {
			sketchBoardCacheModel.configuration = null;
		}

		sketchBoardCacheModel.setup = getSetup();

		String setup = sketchBoardCacheModel.setup;

		if ((setup != null) && (setup.length() == 0)) {
			sketchBoardCacheModel.setup = null;
		}

		return sketchBoardCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(31);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", sketchBoardId=");
		sb.append(getSketchBoardId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", statusByUserId=");
		sb.append(getStatusByUserId());
		sb.append(", statusByUserName=");
		sb.append(getStatusByUserName());
		sb.append(", statusDate=");
		sb.append(getStatusDate());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", configuration=");
		sb.append(getConfiguration());
		sb.append(", setup=");
		sb.append(getSetup());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(49);

		sb.append("<model><model-name>");
		sb.append("ch.inofix.sketchboard.model.SketchBoard");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sketchBoardId</column-name><column-value><![CDATA[");
		sb.append(getSketchBoardId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserId</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusByUserName</column-name><column-value><![CDATA[");
		sb.append(getStatusByUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusDate</column-name><column-value><![CDATA[");
		sb.append(getStatusDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>configuration</column-name><column-value><![CDATA[");
		sb.append(getConfiguration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>setup</column-name><column-value><![CDATA[");
		sb.append(getSetup());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SketchBoard.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SketchBoard.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _sketchBoardId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private long _statusByUserId;
	private String _statusByUserName;
	private Date _statusDate;
	private String _name;
	private String _configuration;
	private String _setup;
	private long _columnBitmask;
	private SketchBoard _escapedModel;
}